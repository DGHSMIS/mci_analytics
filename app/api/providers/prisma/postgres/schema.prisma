// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../prisma/generated/postgres"
}

enum Gender {
  Male
  Female
  Other
}

enum ServiceLocation {
  IPD
  OPD
  Emergency
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

// Payload Logger Table
model NCDPayloadLogger {
  id              Int                    @id @default(autoincrement())
  payload         String
  createdAt       DateTime               @default(now())
  providerId      Int
  facilityCode    String                 @default("")
  accessToken     String
  //Relationship
  skippedPayloads SkippedPayloadLogger[]
}

// Skipped Payload Objects Logger
model SkippedPayloadLogger {
  id           Int              @id @default(autoincrement())
  skippedItems String
  createdAt    DateTime         @default(now())
  message      String           @default("")
  payloadId    Int
  payload      NCDPayloadLogger @relation(fields: [payloadId], references: [id])
  providerId   Int
  facilityCode String           @default("")
}

// Migrate a new Schema using the following command
// npx prisma migrate dev --name init

// Patient Visit Record Table
model PatientVisit {
  id                         Int               @id @default(autoincrement()) // Primary key
  patientId                  Int
  healthId                   String            @default("")
  visitId                    Int
  patientName                String
  dateOfVisit                DateTime
  dob                        DateTime
  gender                     Gender
  facilityCode               String            @default("")
  facility                   Facility          @relation(fields: [facilityCode], references: [code]) // Foreign key relationship
  serviceLocation            ServiceLocation
  isReferredToHigherFacility Boolean
  isFollowUp                 Boolean
  dieasesOnVisit             DiseasesOnVisit[]
  createdAt                  DateTime          @default(now())
}

// Disease Table
model Disease {
  id              Int               @id @default(autoincrement()) // Primary key
  conceptName     String            @default("")
  conceptUuId     String            @unique
  createdAt       DateTime          @default(now())
  // Relationship
  diseasesOnVisit DiseasesOnVisit[]
}

model DiseasesOnVisit {
  id              Int          @id @default(autoincrement()) // Primary key
  patientVisitId  Int
  patientVisit    PatientVisit @relation(fields: [patientVisitId], references: [id])
  conceptUuId     String
  disease         Disease      @relation(fields: [conceptUuId], references: [conceptUuId])
  patientSymptoms String       @default("")
  createdAt       DateTime     @default(now())
}

// Facility Table
model Facility {
  id            Int            @id @default(autoincrement()) // Primary key
  code          String         @unique
  name          String         @default("")
  address       String         @default("")
  solutionType  String         @default("")
  divisionCode  String         @default("")
  districtCode  String         @default("")
  upazilaCode   String         @default("")
  catchment     String         @default("")
  careLevel     String         @default("")
  ownership     String         @default("")
  orgType       String         @default("")
  createdAt     DateTime       @default(now())
  // Relationship
  patientVisits PatientVisit[]
}
